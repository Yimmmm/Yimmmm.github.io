<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yimmm</title>
  
  <subtitle>拔剑千山过、归来仍少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-08T16:30:58.197Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yimmm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis内部实现原理</title>
    <link href="http://yoursite.com/post/7b25d017.html"/>
    <id>http://yoursite.com/post/7b25d017.html</id>
    <published>2018-07-30T13:06:56.000Z</published>
    <updated>2018-09-08T16:30:58.197Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/post/../images/redis/top.jpg" weight="680px" height="240"></p><p>　　是完全开源免费的，用C语言编写的，遵守BSD协议,是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的NoSQL数据库。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>string 字符串</li><li>hash 哈希</li><li>list 列表</li><li>set 集合</li><li>zset 有序集合</li></ul><a id="more"></a><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><img src="/post/../images/redis/kv.png" weight="400px" height="200"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h4><p>　　简单动态字符串(Simple Dynamic String） 　　  </p><h5 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="comment">// 记录 buf 数组中已使用字节的数量</span></span><br><span class="line">    <span class="comment">// 等于 SDS 所保存字符串的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="comment">// 记录 buf 数组中未使用字节的数量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">// 字节数组，用于保存字符串</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/post/../images/redis/sds.png" weight="200px" height="150"></p><h5 id="与C字符串相比优势"><a href="#与C字符串相比优势" class="headerlink" title="与C字符串相比优势"></a>与C字符串相比优势</h5><ul><li>二进制安全<ul><li>C是通过特殊字符（\0）结束</li><li>Redis中len属性通过len来 </li></ul></li><li>减少内存重分配次数<ul><li>内存预分配<ul><li>修改之后的字符串长度&lt;1M,则分配与当前字符串相同的空间 </li><li>修改之后的字符串长度&gt;1M,则分配空间为1M </li></ul></li><li>惰性释放 <ul><li>当字符串缩短时，空间不会释放，而是标识free </li></ul></li></ul></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">void</span> *value;</span><br><span class="line"></span><br><span class="line">&#125; listNode;</span><br></pre></td></tr></table></figure><p><img src="/post/../images/redis/link.png" weight="200px" height="200"></p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li>双端：获取某个节点的前置节点和后置节点的复杂度都是 O(1) </li><li>无环：prev和next 指针都指向 NULL</li><li>带表头指针和表尾指针：获取链表中节点数量的复杂度为 O(1)</li><li>带链表长度计数器：获取链表数量的复杂度为 O(1)</li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul><li>列表键</li><li>发布与订阅</li><li>慢查询 </li><li>监视器</li></ul><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line"></span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p><img src="/post/../images/redis/hash.png" weight="400px" height="400"></p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>rehashidx：记录rehash目前的进度，如果没有进行rehash那么值为-1</p><h5 id="hash冲突"><a href="#hash冲突" class="headerlink" title="hash冲突"></a>hash冲突</h5><p>Redis使用地址法（separate chaining）来解决键冲突，为了速度考虑， 程序总是将新节点添加到链表的表头位置。</p><h5 id="rehash条件"><a href="#rehash条件" class="headerlink" title="rehash条件"></a>rehash条件</h5><blockquote><p>load_factor = ht[0].used / ht[0].size</p></blockquote><ul><li>当服务器没有执行BGSAVE或者BGREWRITEAOF命令, load_factor &gt;=1，进行扩展</li><li>当服务器执行BGSAVE或者BGREWRITEAOF命令, load_factor&gt;=5，进行扩展</li><li>当 load_factor &lt; 0.1 时，进行收缩  </li></ul><h5 id="渐进式rehash过程"><a href="#渐进式rehash过程" class="headerlink" title="渐进式rehash过程"></a>渐进式rehash过程</h5><ul><li>ht[1]hash表分配空间，同时持有两个哈希表<ul><li>扩展操作 ht[1] = ht[0].used * 2</li><li>收缩操作 ht[1] = ht[0].used </li></ul></li><li>在字典中维持一个索引计数器变量 rehashidx ， 并将它的值设置为 0，表示 rehash 工作正式开始</li><li>每次增加、删除、更新或者查找，程序除了执行指定的操作外，还将ht[0]还是表在rehashidx上的所有键rehash到ht[1],rehashidx++</li><li>将ht[0]上的所有键rehash到ht[1]上以后，rehashidx值设置为-1，表示完成</li><li>迁移完成之后，ht[1] = ht[0] ,释放ht[0]，在ht[1]新建一个空白的hash表</li></ul><h4 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分值</span></span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跨度</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> span;</span><br><span class="line">        </span><br><span class="line">    &#125; level[];</span><br><span class="line">    </span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><p><img src="/post/../images/redis/zskiplist.png" weight="400px" height="400"></p><ul><li>header ：指向跳跃表的表头节点。</li><li>tail ：指向跳跃表的表尾节点。</li><li>level ：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算在内），幂次定律，随机1-32。</li><li>length ：记录跳跃表的长度，也即是，跳跃表目前包含节点的数量（表头节点不计算在内）。</li></ul><ul><li>幂次定律 </li></ul><h4 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**<span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">    <span class="comment">// 编码方式</span></span><br><span class="line">    <span class="keyword">uint32_t</span> encoding;</span><br><span class="line">    <span class="comment">// 集合包含的元素数量</span></span><br><span class="line">    <span class="keyword">uint32_t</span> length;</span><br><span class="line">    <span class="comment">// 保存元素的数组</span></span><br><span class="line">    <span class="keyword">int8_t</span> contents[];</span><br><span class="line"></span><br><span class="line">&#125; intset;**</span><br></pre></td></tr></table></figure><p><img src="/post/../images/redis/int.png" weight="200px" height="200"></p><h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><table><thead><tr><th>编码类型</th><th style="text-align:center">最小值</th><th style="text-align:right">最大值   </th></tr></thead><tbody><tr><td>int16_t</td><td style="text-align:center">-32786</td><td style="text-align:right">32767</td></tr><tr><td>int32_t</td><td style="text-align:center">-2147283648</td><td style="text-align:right">2147283647</td></tr><tr><td>int64_t</td><td style="text-align:center">…</td><td style="text-align:right">…</td></tr></tbody></table><p><strong>Q1:为什么要升级？</strong></p><h4 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h4><ul><li>压缩列表是 Redis 为了节约内存而开发的， 由一系列特殊编码的连续内存块组成的顺序型数据结构。　</li><li>压缩列表只记录前一个字节点的长度</li><li>连锁更新，最坏的复杂度O(N²)</li></ul><p>　　</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>　　Redis并没有直接使用上面的数据结构来实现，而是基于这些数据结构创建了一个对象系统，包括字符串对象、列表对象、哈希对象、集合对象和有序集合对象这五种对象，每种用到了上面至少一种数据类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指向底层实现数据结构的指针</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//引用计数器</span></span><br><span class="line">    <span class="keyword">int</span> refcount</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><table><thead><tr><th>对象</th><th>对象名称</th></tr></thead><tbody><tr><td>REDIS_STRING</td><td>字符串对象</td></tr><tr><td>REDIS_LIST</td><td>列表对象</td></tr><tr><td>REDIS_HASH</td><td>哈希对象</td></tr><tr><td>REDIS_SET</td><td>集合对象</td></tr><tr><td>REDIS_ZSET</td><td>有序集合对象</td></tr></tbody></table><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><table><thead><tr><th>类型</th><th>编码</th><th>对象</th></tr></thead><tbody><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_INT</td><td>使用整数值实现的<strong>字符串</strong>对象。</td></tr><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_EMBSTR</td><td>使用 embstr 编码的<strong>简单动态字符串</strong>实现的字符串对象。</td></tr><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_RAW</td><td>使用简单<strong>动态字符串</strong>实现的字符串对象。</td></tr><tr><td>REDIS_LIST</td><td>REDIS_ENCODING_ZIPLIST</td><td>使用<strong>压缩列表</strong>实现的列表对象。</td></tr><tr><td>REDIS_LIST</td><td>REDIS_ENCODING_LINKEDLIST</td><td>使用<strong>双端链表</strong>实现的列表对象。</td></tr><tr><td>REDIS_HASH</td><td>REDIS_ENCODING_ZIPLIST</td><td>使用<strong>压缩列表</strong>实现的哈希对象。</td></tr><tr><td>REDIS_HASH</td><td>REDIS_ENCODING_HT</td><td>使用<strong>字典</strong>实现的哈希对象。</td></tr><tr><td>REDIS_SET</td><td>REDIS_ENCODING_INTSET</td><td>使用<strong>整数</strong>集合实现的集合对象。</td></tr><tr><td>REDIS_SET</td><td>REDIS_ENCODING_HT</td><td>使用<strong>字典</strong>实现的集合对象。</td></tr><tr><td>REDIS_ZSET</td><td>REDIS_ENCODING_ZIPLIST</td><td>使用<strong>压缩列表</strong>实现的有序集合对象。</td></tr><tr><td>REDIS_ZSET</td><td>REDIS_ENCODING_SKIPLIST</td><td>使用<strong>跳跃表</strong>和<strong>字典</strong>实现的有序集合对象。</td></tr></tbody></table><h4 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h4><p>　　通过引用计数法进行内存回收，若果refcount=0，则内存会被释放</p><h4 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h4><p>　　服务器初始化，创建一万个字符串对象，包含1-9999的所有整数值</p><p><strong>Q2:为什么不共享包含字符串的对象或者多值对象？</strong> </p><h3 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h3><table><thead><tr><th>策略</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td> 定时删除</td><td>内存友好</td><td>CPU不友好 </td></tr><tr><td> <strong>惰性删除</strong></td><td>CPU友好</td><td>内存泄漏</td></tr><tr><td> <strong>定期删除</strong></td><td>折中</td><td>执行时长和频率不好控制</td></tr></tbody></table><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h4><p>　　将数据库的快照以二进制压缩文件的方式保存到磁盘</p><h5 id="间隔自动保存"><a href="#间隔自动保存" class="headerlink" title="间隔自动保存"></a>间隔自动保存</h5><table><thead><tr><th>时间</th><th>次数</th></tr></thead><tbody><tr><td>900</td><td>1</td></tr><tr><td>300</td><td>10</td></tr><tr><td>60</td><td>10000</td></tr></tbody></table><h4 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h4><p>　　将所有写入命令及相关参数以协议文本的方式写入文件并持久保存磁盘　　</p><ul><li>AOF 持久化功能的实现可以分为命令追加（append）、文件写入、文件同步（sync）三个步骤。</li></ul><h5 id="AOF持久化的安全与效率"><a href="#AOF持久化的安全与效率" class="headerlink" title="AOF持久化的安全与效率"></a>AOF持久化的安全与效率</h5><p>appendfsync   </p><ul><li>always</li><li>everysec</li><li>no</li></ul><h5 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h5><ul><li>REWRITE: 在主线程中重写AOF，会阻塞工作线程，在生产环境 中很少使用，处于废弃状态；</li><li>BGREWRITE: 在后台（子进程）重写AOF, 不会阻塞工作线程，能正常服务，此方法最常用。</li></ul><p>　　AOF通过记录命令来记录数据库状态的，所以AOF文件的大小随着时间的流逝一定会越来越大，Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件。<br><img src="/post/../images/redis/aof.png" weight="400px" height="400"></p><p><strong>Q3：子进程重写期间，新的命令进来了怎么办？</strong></p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>Redis服务器是一个事件驱动程序</p><ul><li>文件事件</li></ul><p><img src="/post/../images/redis/fileevent.png" weight="400px" height="400"></p><ul><li>时间事件<ul><li>ServerCron 每100ms执行一次</li></ul></li></ul><p><img src="/post/../images/redis/timeevent.png" weight="400px" height="400"></p><h3 id="多机实现"><a href="#多机实现" class="headerlink" title="多机实现"></a>多机实现</h3><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><h5 id="旧版复制"><a href="#旧版复制" class="headerlink" title="旧版复制"></a>旧版复制</h5><ul><li>同步操作，从服务器更新至主服务器的状态</li><li>命令传播，主服务器发送命令进行同步</li></ul><h5 id="新版复制"><a href="#新版复制" class="headerlink" title="新版复制"></a>新版复制</h5><ul><li>复制偏移量</li><li>复制积压缓冲区，固定长度，FIFO，1M</li><li>服务器运行ID，启动时生成的40哥随机十六进制字符</li></ul><h5 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h5><ul><li>每秒一次的频率<ul><li>连接状态</li><li>检测命令丢失 </li></ul></li></ul><h4 id="哨兵-Sentinal"><a href="#哨兵-Sentinal" class="headerlink" title="哨兵 Sentinal"></a>哨兵 Sentinal</h4><ul><li>Sentinal本质上只是一个在特殊模式下的Redis服务器</li><li>Sentinal初始化完成以后成为主服务器的客户端<ul><li>命令连接</li><li>订阅连接</li></ul></li></ul><p><strong>Q4:为什么会有两个连接？</strong></p><h5 id="选举领头Sentinel"><a href="#选举领头Sentinel" class="headerlink" title="选举领头Sentinel"></a>选举领头Sentinel</h5><ul><li>发现主服务器下线以后，都认为自己是局部领头</li><li>局部领头，先到先得</li><li>半数以上选举成功，没有接着选</li></ul><h5 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h5><ul><li>删除列表中处于下线或者断线的从服务器</li><li>删除列表中所有最近五秒没有回复过领头Sentinel命令的服务器</li><li>删除与主服务器超过 down-after-milliseconds * 10 ms</li><li>开始优先级排序<ul><li>最高优先级-&gt;复制偏移量-&gt;运行服务器ID最小</li></ul></li></ul><h5 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h5><ul><li>使用一致性hash实现，0-16384个slots</li></ul><h3 id="独立功能"><a href="#独立功能" class="headerlink" title="独立功能"></a>独立功能</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>非EXEC、DISCARD、WATCH、MULTI<br><img src="/post/../images/redis/hasherror.png" weight="300px" height="300"></li></ul><h5 id="WATCH命令"><a href="#WATCH命令" class="headerlink" title="WATCH命令"></a>WATCH命令</h5><ul><li>WATCH命令是一个乐观锁，可以监视任意多的键，在EXEC执行之前会检查是否有值进行修改</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/post/../images/redis/top.jpg&quot; weight=&quot;680px&quot; height=&quot;240&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　是完全开源免费的，用C语言编写的，遵守BSD协议,是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的NoSQL数据库。&lt;/p&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;string 字符串&lt;/li&gt;
&lt;li&gt;hash 哈希&lt;/li&gt;
&lt;li&gt;list 列表&lt;/li&gt;
&lt;li&gt;set 集合&lt;/li&gt;
&lt;li&gt;zset 有序集合&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
  </entry>
  
</feed>
